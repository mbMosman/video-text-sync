/*! @license html5-youtube.js by Ginpei https://github.com/ginpei/html5-youtube.js MIT License */
/* global YT */
!function(e,t){/**
	 * The interface.
	 */
e.youtube=function(e){return new i(e)};/**
	 * The constructor.
	 */
var i=e.youtube.Player=function(e){
// define property's getters and setters if they have not yet
i._undefinedProperties&&(i._execDefineProperties(),delete i._undefinedProperties),this.initialize(e)};/**
	 * The definition of available playbackRate values on YouTube API.
	 * @see https://developers.google.com/youtube/js_api_reference#Playback_rate
	 */
e.youtube.availablePlaybackRates=[.25,.5,1,1.5,2];
// shortcut
var r=i.prototype;
// ----------------------------------------------------------------
// Statics
/**
	 * These values are used to detect states in onStateChange event.
	 * They are same as YouTube API's `YT.PlayerState`.
	 * @see https://developers.google.com/youtube/iframe_api_reference#onStateChange
	 */
i.PlayerState={UNSTARTED:-1,ENDED:0,PLAYING:1,PAUSED:2,BUFFERING:3,CUED:5},/**
	 * Proxy for `Function#bind`.
	 * It can be placed for compat.
	 * @param {Function} fn
	 * @returns {Function}
	 */
i.bind=function(e){var t=Array.prototype.slice.call(arguments,1);return Function.prototype.bind.apply(e,t)},/**
	 * Execute property definig for stored values in `_undefinedProperties`.
	 * This method is called only once when the first instance is created.
	 */
i._execDefineProperties=function(){var e=this.prototype,t=this._undefinedProperties;for(var i in t)this._execDefineProperty(e,i,t[i])},/**
	 * Proxy for `Object.defineProperty`.
	 * It can be placed for compat.
	 */
i._execDefineProperty=function(e,t,i){Object.defineProperty(e,t,i)},/**
	 * Parse data attributes to number or string
	 * Examples:
	 * Player._parseDataAttribute('true') // 1
	 * Player._parseDataAttribute('0') // 0
	 * Player._parseDataAttribute('2EEsa_pqGAs') // '2EEsa_pqGAs'
	 * @param {String} the data-attribute content
	 * @returns {Number or String}
	 */
i._parseDataAttribute=function(e){if("string"==typeof e){var t=Number(e);return function(e){
// NaN is the only value to return false when compared to itself
return e!==e}(t)||"number"!=typeof t?"true"===e||"false"!==e&&e:Number(e)}},/**
	 * Load YouTube API script.
	 * @param {Function} callback
	 */
i.prepareYTScript=function(r){
// Status is changed as: initial->loading->ready.
// * The callback will run later if initial
// * The callback is queued and will run if loading
// * The callback run immediately if ready
//
var n=this._ytStatus;if(void 0===n){// initial; not started
// initialize the callback queue
var a=this._ytCallbacks=[];a.push(r);
// load YouTube script
var s=t.createElement("script");s.src="https://www.youtube.com/iframe_api",t.body.appendChild(s),
// set callbacks
e.onYouTubeIframeAPIReady=i.bind(function(){a.forEach(function(e,t){e()}),delete this._ytCallbacks,this._ytStatus=2},this),
// update status
this._ytStatus=1}else 1===n?// loading; started but not loaded yet
this._ytCallbacks.push(r):2===n&&// ready; script is completely loaded
r()},
// ----------------------------------------------------------------
// Constructing
/**
	 * Initialize the instance ownself.
	 * @param {Object} options
	 */
r.initialize=function(e){this.player||(this._events=[],this._resetProperties(),this._initializeEventer(),this._buildPlayer(e))},/**
	 * Good bye!
	 */
r.destroy=function(){this.player&&(this._removeAllEventListeners(),this._clearEventer(),this._stopAllObservings(),this._resetProperties(),this._destroyPlayer())},/**
	 * Load YouTube API and setup video UI.
	 * It can be placed for compat.
	 * @param {Object} options
	 */
r._buildPlayer=function(e){i.prepareYTScript(i.bind(this._setupVideo,this,e))},/**
	 * @see #destroy
	 */
r._destroyPlayer=function(){this.player.destroy(),this.player=null},/**
	 * YT.Player has add/removeEventListener methods but they doesn't work correctly
	 * It can be placed for compat.
	 */
r._initializeEventer=function(){this._eventer=t.createElement("ytapiplayer"),t.body.appendChild(this._eventer)},/**
	 * It can be placed for compat.
	 * @see #destroy
	 */
r._clearEventer=function(){t.body.removeChild(this._eventer),this._eventer=null},/**
	 * Setup viode UI.
	 * @param {Object} options
	 */
r._setupVideo=function(e){var t=this._getVideoOptions(e);this.player=this._createPlayer(t.el,{events:this._getVideoEvents(),height:t.height,playerVars:t.playerVars,videoId:t.videoId,width:t.width})},r._getVideoOptions=function(e){var t=e&&e.el;if(!t||!t.getAttribute)throw new Error("`options.el` is require.");var i=["autohide","autoplay","cc_load_policy","color","controls","disablekb","enablejsapi","end","fs","hl","iv_load_policy","list","listType","loop","modestbranding","origin","playerapiid","playlist","playsinline","rel","showinfo","start","theme"],r=e.id||t.getAttribute("data-youtube-videoid"),n={};i.forEach(function(t){n[t]=this._getPlayerVarsOption(e,t)}.bind(this));var a,s=t.clientHeight;return s?a=t.clientWidth:(s=390,a=640),{el:t,height:s,playerVars:n,videoId:r,width:a}},r._getPlayerVarsOption=function(e,t){var r;if(void 0==e[t]){// or null
var n=e.el.getAttribute("data-youtube-"+t);r=i._parseDataAttribute(n)}else r=e[t];
// Convert booleans to number
return"number"==typeof r&&r>=0||"string"==typeof r||(r="boolean"==typeof r?Number(r):void 0),r},r._getVideoEvents=function(){var e={};return["onApiChange","onError","onPlaybackQualityChange","onPlaybackRateChange","onReady","onStateChange"].forEach(function(t,r){e[t]=i.bind(this[t],this)}.bind(this)),e},r._createPlayer=function(e,t){return new YT.Player(e,t)},
// ----------------------------------------------------------------
// Events
/**
	 * Attach an event handler function.
	 * @param {String} type A event type like `"play"`, '"timeupdate"` or `"onReady"`.
	 * @param {Function} listener A function to execute when the event is triggered.
	 * @see {#removeEventListener}
	 */
r.addEventListener=function(e,t){var i=this._pushListener(e,t);this._eventer.addEventListener(e,i)},/**
	 * Dettach an event handler function.
	 * @param {String} type
	 * @param {Function} listener
	 * @see {#addEventListener}
	 */
r.removeEventListener=function(e,t){var i=this._popListener(e,t);i&&this._eventer.removeEventListener(e,i.binded)},/**
	 * A shortcut for `addEventListener` and returns `this`.
	 * You can use method chaining.
	 * @param {String} type
	 * @param {Function} listener
	 * @returns {Player}
	 */
r.on=function(e,t){return this.addEventListener(e,t),this},/**
	 * A shortcut for `removeEventListener` and returns `this`.
	 * You can use method chaining.
	 * @param {String} type
	 * @param {Function} listener
	 * @returns {Player}
	 */
r.off=function(e,t){return this.removeEventListener(e,t),this},/**
	 * Trigger an event.
	 * It can be placed for compat.
	 * @param {String} type A event type like `"play"`, '"timeupdate"` or `"onReady"`.
	 */
r.trigger=function(e,i){var r=t.createEvent("CustomEvent");r.initEvent(e,!1,!0),r.player=this,i&&(r.playerData=i.data,r.originalEvent=i),this._eventer.dispatchEvent(r)},/**
	 * @see #destroy
	 */
r._removeAllEventListeners=function(){var e=this._events;for(var t in e){for(var i=e[t],r=0,n=i.length;r<n;r++){var a=i[r];a&&(this.removeEventListener(t,a.listener),delete a.listener,delete a.binded,i[r]=null)}delete e[t]}},r._pushListener=function(e,t){var r=i.bind(t,this),n=this._events[e];return n||(n=this._events[e]=[]),n.push({binded:r,listener:t}),r},r._popListener=function(e,t){var i=this._events[e];if(i)for(var r=0,n=i.length;r<n;r++){var a=i[r];if(a&&a.listener===t)return i[r]=null,a}},r.onApiChange=function(e){this.trigger("onApiChange",e)},/**
	 * @param {Number} event.playerData The error ID.
	 * @see https://developers.google.com/youtube/iframe_api_reference#onError
	 */
r.onError=function(e){this.trigger("onError",e),this.trigger("error",e)},r.onPlaybackQualityChange=function(e){this.trigger("onPlaybackQualityChange",e)},r.onPlaybackRateChange=function(e){this.trigger("onPlaybackRateChange",e)},r.onReady=function(e){this.trigger("onReady",e),this._unsetVideoId&&(this.player.cueVideoById(this._unsetVideoId),delete this._unsetVideoId),this._updateMeta(),this._observeTimeUpdate(),this._observeVolume(),this._observePlaybackRate(),this._observeDuration(),this.trigger("ready",e),this.trigger("canplay",e),this.trigger("canplaythrough")},r.onStateChange=function(e){this.trigger("onStateChange",e);var t=e.data;this.played=this.paused=this.ended=!1,t===i.PlayerState.UNSTARTED?this.trigger("emptied",e):t===i.PlayerState.ENDED?(this.ended=!0,this.trigger("ended",e)):t===i.PlayerState.PLAYING?(this.played=!0,this.trigger("play",e),this.trigger("playing",e)):t===i.PlayerState.PAUSED?(this.paused=!0,this.trigger("pause",e)):t===i.PlayerState.BUFFERING?this.trigger("buffer",e):t===i.PlayerState.CUED&&(this._updateMeta(),this.trigger("canplay"),this.trigger("canplaythrough"))},
// ----------------------------------------------------------------
// Manip
/**
	 * Play the video.
	 */
r.play=function(){this.player&&this.player.playVideo()},/**
	 * Stop the video.
	 */
r.pause=function(){this.player&&this.player.pauseVideo()},/**
	 * This function returns the set of playback rates in which the current video is available. The default value is 1, which indicates that the video is playing in normal speed.
	 *
	 * The function returns an array of numbers ordered from slowest to fastest playback speed. Even if the player does not support variable playback speeds, the array should always contain at least one value (1).
	 * @returns {Array}
	 * @see https://developers.google.com/youtube/iframe_api_reference#getAvailablePlaybackRates
	 */
r.getAvailablePlaybackRates=function(){return this.player?this.player.getAvailablePlaybackRates():void 0},
// ----------------------------------------------------------------
// Properties
r._updateMeta=function(){this._src=this.currentSrc=this.player.getVideoUrl()},/**
	 * Start observing timeupdate's change.
	 */
r._observeTimeUpdate=function(){this._tmTimeUpdate=setInterval(i.bind(function(){var e=this.player.getCurrentTime();e!==this._currentTime&&(this._currentTime=e,this.trigger("timeupdate"))},this),100)},/**
	 * Start observing volume's change.
	 */
r._observeVolume=function(){this._tmVolume=setInterval(i.bind(function(){var e=this.player.isMuted(),t=this.player.getVolume();e===this._muted&&t===this._volume||(this._muted=e,this._volume=t,this.trigger("volumechange"))},this),100)},/**
	 * Start observing playbackRate's change.
	 */
r._observePlaybackRate=function(){this._tmPlaybackRate=setInterval(i.bind(function(){var e=this.player.getPlaybackRate();e!==this._playbackRate&&(this._playbackRate=e,this.trigger("ratechange"))},this),100)},/**
	 * Start observing duration's change.
	 */
r._observeDuration=function(){this._tmDuration=setInterval(i.bind(function(){var e=this.player.getDuration()||0;e!==this.duration&&(this.duration=e,this.trigger("durationchange"))},this),100)},/**
	 * @see #destroy
	 */
r._stopAllObservings=function(){clearInterval(this._tmTimeUpdate),clearInterval(this._tmVolume),clearInterval(this._tmPlaybackRate),clearInterval(this._tmDuration)},r._resetProperties=function(){this._currentTime=null,this._volume=null,this._muted=null,this._playbackRate=null,this._src=null,this.duration=null,this.currentSrc=null,this.played=null,this.paused=null,this.ended=null},/**
	 * Definitions are stored here.
	 * @type Array
	 */
i._undefinedProperties={/**
		 * Returns the current playback position, in seconds, as a position between zero time and the current duration.
		 * Can be set, to seek to the given time.
		 * @type number
		 */
currentTime:{get:function(){return this._currentTime},set:function(e){this.player&&this.player.seekTo(e,!0)}},/**
		 * Returns the current playback volume multiplier, as a number in the range 0.0 to 1.0, where 0.0 is the quietest and 1.0 the loudest.
		 * Can be set, to change the volume multiplier.
		 * @type number
		 */
volume:{get:function(){return this._volume/100},set:function(e){this.player&&this.player.setVolume(100*e)}},/**
		 * Returns true if all audio is muted (regardless of other attributes either on the controller or on any media elements slaved to this controller), and false otherwise.
		 * Can be set, to change whether the audio is muted or not.
		 * @type number
		 */
muted:{get:function(){return this._muted},set:function(e){this.player&&this.player[e?"mute":"unMute"]()}},/**
		 * Returns the default rate of playback, for when the user is not fast-forwarding or reversing through the media resource.
		 * Can be set, to change the default rate of playback.
		 * @type number
		 */
playbackRate:{get:function(){return this._playbackRate},set:function(e){this.player&&this.player.setPlaybackRate(e)}},/**
		 * Returns the address of the current media resource.
		 * Can be set, to change the video URL.
		 * @type number
		 */
src:{get:function(){return this._src},set:function(e){this.player?this.player.cueVideoById(e):this._unsetVideoId=e}}}}(window,document);
